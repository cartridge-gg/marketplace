name: claude

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if commit is from Claude
        id: check-author
        run: |
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          if [[ "$AUTHOR_EMAIL" == *"claude[bot]"* ]] || [[ "$AUTHOR_NAME" == *"claude[bot]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Claude Code Review
        id: claude-review
        if: steps.check-author.outputs.skip != 'true'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this TypeScript/React + Dojo smart contracts marketplace PR and provide inline feedback using the GitHub review system. Follow these steps:

            1. **Check for existing reviews**: First, use `mcp__github__get_pull_request_reviews` to check if you have any existing pending or submitted reviews on this PR
            2. **Check existing comments**: Use `mcp__github__get_pull_request_comments` to see what comments have already been made to avoid redundancy
            3. **Start a fresh review**: Use `mcp__github__create_pending_pull_request_review` to begin a new pending review
            4. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes
            5. **Add unique inline comments**: Only add comments for issues that haven't been addressed in existing reviews
            6. **Add inline comments**: Use `mcp__github__add_pull_request_review_comment_to_pending_review` for each specific piece of feedback on particular lines, including code change suggestions where appropriate using multiline comments and the suggestion syntax:

            ```suggestion
              const ExampleComponent: React.FC<Props> = ({ asset }) => {
                return <MarketplaceCard asset={asset} />;
              };
            ```

            7. **Submit the review**: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" (not "REQUEST_CHANGES") to publish all comments as a non-blocking review

            Only comment when something is off, wrong, or could be improved but don't be overly pedantic; if a given implementation is already good, do not comment on it.

            Focus your review on:

            **Frontend Code Quality:**
            - TypeScript type safety and proper type annotations
            - React best practices and hooks usage
            - Component reusability and composition
            - Proper state management patterns
            - Dojo SDK integration and usage patterns

            **Smart Contract Quality:**
            - Cairo syntax and best practices
            - Dojo framework patterns (Systems, Components, World)
            - Gas optimization opportunities
            - Contract security and access controls
            - Proper event emission and data structures

            **Marketplace-Specific Logic:**
            - Asset trading mechanisms and security
            - Fee calculation accuracy and transparency
            - User input validation and sanitization
            - Marketplace state consistency
            - NFT/gaming asset standards compliance

            **Performance & UX:**
            - Frontend rendering optimization
            - Smart contract call efficiency
            - User workflow smoothness
            - Error handling and user feedback
            - Responsive design implementation

            **Security:**
            - Smart contract vulnerability prevention
            - Frontend security best practices
            - Wallet integration security
            - Asset ownership verification
            - Transaction validation and error handling

            **Testing & Documentation:**
            - Unit test coverage for critical functionality
            - Integration test completeness
            - Code documentation and comments
            - API/contract interface documentation
            - User-facing feature documentation

            Provide specific, actionable feedback with inline comments and suggestions for line-specific issues. Include an concise overall summary when submitting the review.

            **Important**: Submit as "COMMENT" type so the review doesn't block the PR.

          # Add MCP GitHub tools for inline comments and project-specific testing
          allowed_tools: "mcp__github__create_pending_pull_request_review,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_reviews,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff,Bash(pnpm install),Bash(pnpm run build),Bash(pnpm run test),Bash(pnpm run lint),Bash(pnpm run type:check),Bash(pnpm run build:scarb),Bash(pnpm --filter *),Bash(sozo build),Bash(sozo test)"